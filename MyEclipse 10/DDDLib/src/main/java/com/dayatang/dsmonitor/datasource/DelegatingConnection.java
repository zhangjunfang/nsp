package com.dayatang.dsmonitor.datasource;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

import com.dayatang.utils.Assert;

public class DelegatingConnection implements Connection {

	protected Connection targetConnection;

	public DelegatingConnection(Connection targetConnection) {
		Assert.notNull(targetConnection, "'targetConnection' must not be null");
		this.targetConnection = targetConnection;
	}

	public Connection getTargetConnection() {
		return targetConnection;
	}

	@Override
	public void clearWarnings() throws SQLException {
		targetConnection.clearWarnings();
	}

	@Override
	public void close() throws SQLException {
		targetConnection.close();
	}

	@Override
	public void commit() throws SQLException {
		targetConnection.commit();
	}

	@Override
	public Statement createStatement() throws SQLException {
		return targetConnection.createStatement();
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency)
			throws SQLException {
		return targetConnection.createStatement(resultSetType,
				resultSetConcurrency);
	}

	@Override
	public Statement createStatement(int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		return targetConnection.createStatement(resultSetType,
				resultSetConcurrency, resultSetHoldability);
	}

	@Override
	public boolean getAutoCommit() throws SQLException {
		return targetConnection.getAutoCommit();
	}

	@Override
	public String getCatalog() throws SQLException {
		return targetConnection.getCatalog();
	}

	@Override
	public int getHoldability() throws SQLException {
		return targetConnection.getHoldability();
	}

	@Override
	public DatabaseMetaData getMetaData() throws SQLException {
		return targetConnection.getMetaData();
	}

	@Override
	public int getTransactionIsolation() throws SQLException {

		return targetConnection.getTransactionIsolation();
	}

	@Override
	public Map<String, Class<?>> getTypeMap() throws SQLException {
		return targetConnection.getTypeMap();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return targetConnection.getWarnings();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return targetConnection.isClosed();
	}

	@Override
	public boolean isReadOnly() throws SQLException {
		return targetConnection.isReadOnly();
	}

	@Override
	public String nativeSQL(String sql) throws SQLException {
		return targetConnection.nativeSQL(sql);
	}

	@Override
	public CallableStatement prepareCall(String sql) throws SQLException {
		return targetConnection.prepareCall(sql);
	}

	@Override
	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException {
		return targetConnection.prepareCall(sql, resultSetType,
				resultSetConcurrency);
	}

	@Override
	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		return targetConnection.prepareCall(sql, resultSetType,
				resultSetConcurrency, resultSetHoldability);
	}

	@Override
	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return targetConnection.prepareStatement(sql);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
			throws SQLException {
		return targetConnection.prepareStatement(sql, autoGeneratedKeys);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
			throws SQLException {
		return targetConnection.prepareStatement(sql, columnIndexes);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, String[] columnNames)
			throws SQLException {
		return targetConnection.prepareStatement(sql, columnNames);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException {
		return targetConnection.prepareStatement(sql, resultSetType,
				resultSetConcurrency);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		return targetConnection.prepareStatement(sql, resultSetType,
				resultSetConcurrency, resultSetHoldability);
	}

	@Override
	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		targetConnection.releaseSavepoint(savepoint);
	}

	@Override
	public void rollback() throws SQLException {
		targetConnection.rollback();
	}

	@Override
	public void rollback(Savepoint savepoint) throws SQLException {
		targetConnection.rollback(savepoint);
	}

	@Override
	public void setAutoCommit(boolean autoCommit) throws SQLException {
		targetConnection.setAutoCommit(autoCommit);
	}

	@Override
	public void setCatalog(String catalog) throws SQLException {
		targetConnection.setCatalog(catalog);
	}

	@Override
	public void setHoldability(int holdability) throws SQLException {
		targetConnection.setHoldability(holdability);
	}

	@Override
	public void setReadOnly(boolean readOnly) throws SQLException {
		targetConnection.setReadOnly(readOnly);
	}

	@Override
	public Savepoint setSavepoint() throws SQLException {
		return targetConnection.setSavepoint();
	}

	@Override
	public Savepoint setSavepoint(String name) throws SQLException {
		return targetConnection.setSavepoint(name);
	}

	@Override
	public void setTransactionIsolation(int level) throws SQLException {
		targetConnection.setTransactionIsolation(level);
	}

	@Override
	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		targetConnection.setTypeMap(map);
	}

	/**
	 * 
	 * 
	 * 
	 */

	@Override
	public Array createArrayOf(String s, Object[] aobj) throws SQLException {
		return targetConnection.createArrayOf(s, aobj);
	}

	@Override
	public Blob createBlob() throws SQLException {
		return targetConnection.createBlob();
	}

	@Override
	public Clob createClob() throws SQLException {
		return targetConnection.createClob();
	}

	@Override
	public NClob createNClob() throws SQLException {
		return targetConnection.createNClob();
	}

	@Override
	public SQLXML createSQLXML() throws SQLException {
		return targetConnection.createSQLXML();
	}

	@Override
	public Struct createStruct(String s, Object[] aobj) throws SQLException {
		return targetConnection.createStruct(s, aobj);
	}

	@Override
	public Properties getClientInfo() throws SQLException {
		return targetConnection.getClientInfo();
	}

	@Override
	public String getClientInfo(String s) throws SQLException {
		return targetConnection.getClientInfo(s);
	}

	@Override
	public boolean isValid(int i) throws SQLException {
		return targetConnection.isValid(i);
	}

	@Override
	public void setClientInfo(Properties properties)
			throws SQLClientInfoException {
		targetConnection.setClientInfo(properties);
	}

	@Override
	public void setClientInfo(String s, String s1)
			throws SQLClientInfoException {
		targetConnection.setClientInfo(s, s1);
	}

	@Override
	public boolean isWrapperFor(Class<?> arg0) throws SQLException {
		return targetConnection.isWrapperFor(arg0);
	}

	@Override
	public <T> T unwrap(Class<T> arg0) throws SQLException {
		return targetConnection.unwrap(arg0);
	}

	//For JDK 7 compatability
	@Override
	public void setSchema(String schema) throws SQLException {
	}

	//For JDK 7 compatability
	@Override
	public String getSchema() throws SQLException {
		return null;
	}

	//For JDK 7 compatability
	@Override
	public void abort(Executor executor) throws SQLException {
	}

	//For JDK 7 compatability
	@Override
	public void setNetworkTimeout(Executor executor, int milliseconds)
			throws SQLException {
	}

	//For JDK 7 compatability
	@Override
	public int getNetworkTimeout() throws SQLException {
		return 0;
	}

}
